diff --git a/ccm_web/server/src/main.ts b/ccm_web/server/src/main.ts
index d8cd889d..61cc581f 100644
--- a/ccm_web/server/src/main.ts
+++ b/ccm_web/server/src/main.ts
@@ -14,6 +14,7 @@ import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger'
 
 import { AppModule } from './app.module'
 
+import { CacheControlToHeaderInterceptor } from './no.cache.interceptor'
 import { Config } from './config'
 import baseLogger from './logger'
 
@@ -68,6 +69,7 @@ async function bootstrap (): Promise<void> {
       }
     })
   )
+  app.useGlobalInterceptors(new CacheControlToHeaderInterceptor())
 
   app.useGlobalPipes(new ValidationPipe())
 
diff --git a/ccm_web/server/src/no.cache.interceptor.ts b/ccm_web/server/src/no.cache.interceptor.ts
new file mode 100644
index 00000000..9dc8e999
--- /dev/null
+++ b/ccm_web/server/src/no.cache.interceptor.ts
@@ -0,0 +1,15 @@
+import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common'
+import { Observable } from 'rxjs'
+
+import { Response as ExpressResponse } from 'express'
+
+// https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#the_cache-control_header
+
+@Injectable()
+export class CacheControlToHeaderInterceptor implements NestInterceptor {
+  intercept (context: ExecutionContext, next: CallHandler): Observable<unknown> {
+    const ResponseObj: ExpressResponse = context.switchToHttp().getResponse()
+    ResponseObj.setHeader('Cache-Control', 'no-store')
+    return next.handle()
+  }
+}
